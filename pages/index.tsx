import { useEffect, useState } from "react";
import { useQuery } from "react-query";
import Head from "next/head";
import request from "axios";

type RecipientWallet = {
  label: string;
  address: string;
};

type Coin = {
  denom: string;
  amount: string;
};

type BalanceResponse = {
  balances: Coin[];
  pagination: {
    next_key: string | null;
    total: string;
  };
};

const EXPLORER_URL = "https://terrasco.pe/mainnet/address/";
const BALANCES_URL =
  "https://phoenix-lcd.terra.dev/cosmos/bank/v1beta1/balances/";
const RECIPIENT_LIST_URL =
  "https://raw.githubusercontent.com/kekgod/rebuilderwallets/main/emergency_allocation.json";

const ContentRow = ({ address, label }: { address: string; label: string }) => {
  const [balance, setBalance] = useState<string>();

  useEffect(() => {
    const fetchBalance = async () => {
      const response = await request.get<BalanceResponse>(
        BALANCES_URL + address
      );
      const lunaBalance = response.data.balances.find(
        (b) => b.denom === "uluna"
      );
      if (lunaBalance) {
        setBalance(String(Number(lunaBalance.amount) / 1000000));
      } else {
        setBalance("0");
      }
    };
    fetchBalance();
  }, [balance, address]);

  return (
    <tr>
      <td>{label}</td>
      <td>{address}</td>
      <td>{balance === undefined ? "Loading..." : balance}</td>
      <td>
        <button
          onClick={() => {
            window.open(EXPLORER_URL + address);
          }}
        >
          View
        </button>
      </td>
    </tr>
  );
};

const Content = () => {
  const { isLoading, error, data } = useQuery<boolean, any, RecipientWallet[]>(
    "recipientData",
    () => fetch(RECIPIENT_LIST_URL).then((res) => res.json())
  );

  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>An error has occurred: + {error.message}</p>;
  if (!data) return <div />;

  return (
    <div>
      <table border={1} cellPadding={2}>
        <thead>
          <tr>
            <td>Recipient</td>
            <td>Address</td>
            <td>Current Balance</td>
            <td>View on Terrascope</td>
          </tr>
        </thead>
        <tbody>
          {data.map((d) => {
            return (
              <ContentRow key={d.address} address={d.address} label={d.label} />
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default function Home() {
  return (
    <>
      <Head>
        <title>Builder Allocation List</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Content />
      </div>
    </>
  );
}
